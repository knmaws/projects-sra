AWSTemplateFormatVersion: "2010-09-09"
Description: This templates creates S3 Bucket for storing zip file for deploying ec2 imagebuilder template

Parameters:
  LambdaLogLevel:
    AllowedValues: [INFO, ERROR, DEBUG]
    Default: INFO
    Description: Lambda Function Logging Level
    Type: String
  CBProjectName:
    AllowedValues: [s3-codebuild-project]
    Default: s3-codebuild-project
    Description: S3 CodeBuild project name
    Type: String
  CodeBuildProjectLambdaFunctionName:
    AllowedPattern: '^[\w-]{1,64}$'
    ConstraintDescription: Max 64 alphanumeric characters. Also special characters supported [_, -]
    Default: s3-codebuild-project-lambda
    Description: Lambda function name for starting the code build project
    Type: String
  CodeBuildProjectLambdaRoleName:
    AllowedPattern: '^[\w+=,.@-]{1,64}$'
    ConstraintDescription: Max 64 alphanumeric characters. Also special characters supported [+, =, ., @, -].
    Default: s3-codebuild-project-lambda-role
    Description: Lambda execution role for starting the code build project
    Type: String
  StagingS3BucketNamePrefix:
    AllowedValues: [s3-staging-bucket]
    Default: s3-staging-bucket
    Description:
      SRA Staging S3 bucket name prefix for the SRA artifacts relevant to the solutions. (e.g., lambda zips, CloudFormation templates). The account
      and region are added to the prefix <bucket-name-prefix>-<account-id>-<region>. Example = s3-staging-bucket-123456789012-us-east-1.
    Type: String
  StagingS3BucketStackName:
    AllowedValues: [test-s3-bucket]
    Default: test-s3-bucket
    Description:
      SRA Common Prerequisite Staging S3 bucket stack name.  This stack will be created by the SRA CodeBuild Project.
    Type: String

Resources:
  SRAAMIBakeryBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: sra-ami-bakery-s3-bucket
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Bucket
          Value: sra-ami-bakery-s3-bucket
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CBProjectName
      Artifacts:
        Type: NO_ARTIFACTS
      Description: Create zip file and upload to S3 bucket from local machine
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref SRAAMIBakeryBucket
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: STAGING_S3_BUCKET_STACK_NAME
            Value: !Ref StagingS3BucketStackName
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildRole.Arn
      TimeoutInMinutes: 120
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo Creating a zip file
                - zip -r testFile.zip testFile.txt
            post_build:
              commands:
                - echo copying a zip file to s3 bucket
                - aws s3 cp ./testFile.zip s3://$S3_BUCKET/testFile.zip
                - - echo "Done."
        # Artifacts:
        #   files:
        #     - '**/*'

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: s3-uploading-file
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetObjectVersion
                  - s3:GetObject
                Resource: !Sub "arn:${AWS::Partition}:s3:::{SRAAMIBakeryBucket}"
        - PolicyName: Logs-access
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
        - PolicyName: codebuild-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: codebuildStartBuild
                Effect: Allow
                Action: 
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:build/*"

  CodeBuildProjectCustomResource:
    DependsOn: CodeBuildProject
    Type: Custom::LambdaCustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt CodeBuildProjectLambdaFunction.Arn

  CodeBuildProjectLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref CodeBuildProjectLambdaFunctionName
      Description: Start SRA codebuild project
      Handler: index.lambda_handler
      Role: !GetAtt StartCodeBuildProjectLambdaRole.Arn
      Runtime: python3.9
      Timeout: 900
      Environment:
        Variables:
          LOG_LEVEL: !Ref LambdaLogLevel
          CODE_BUILD_PROJECT_NAME: !Ref CBProjectName
          STAGING_S3_BUCKET_NAME: !Sub ${StagingS3BucketNamePrefix}-${AWS::AccountId}-${AWS::Region}
          STAGING_S3_BUCKET_STACK_NAME: !Ref StagingS3BucketStackName
      Code:
        ZipFile: |
          # type: ignore
          """Custom Resource to start codebuild project.

          Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          SPDX-License-Identifier: MIT-0
          """
          import logging
          import os

          import boto3
          import cfnresponse
          import time
          from botocore.exceptions import ClientError

          LOGGER = logging.getLogger(__name__)
          log_level: str = os.environ.get("LOG_LEVEL", "INFO")
          LOGGER.setLevel(log_level)
          CODE_BUILD_PROJECT_NAME: str = os.environ.get("CODE_BUILD_PROJECT_NAME")
          STAGING_S3_BUCKET_NAME: str = os.environ.get("STAGING_S3_BUCKET_NAME")
          STAGING_S3_BUCKET_STACK_NAME: str = os.environ.get("STAGING_S3_BUCKET_STACK_NAME")

          def start_build():
              """Start build job.

              Returns:
                  Response data for custom resource
              """
              management_account_session = boto3.Session()
              codebuild_client = management_account_session.client("codebuild")
              response = codebuild_client.start_build(projectName=CODE_BUILD_PROJECT_NAME)
              LOGGER.info({"API_Call": "codebuild:StartBuild", "API_Response": response})
              buildId = response["build"]["id"]
              return wait_for_build([buildId], codebuild_client)


          def wait_for_build(BuildId, client):
              buildWaitStatus = "FAILURE_WAIT_TIMEOUT"
              counter = 0
              while counter < 30:
                  time.sleep(10)
                  counter = counter + 1
                  buildStatus = get_build_status(BuildId, client)
                  if buildStatus == "SUCCEEDED":
                      buildWaitStatus = "SUCCESS"
                      break
                  elif buildStatus == "FAILED" or buildStatus == "FAULT" or buildStatus == "STOPPED" or buildStatus == "TIMED_OUT":
                      buildWaitStatus = "BUILD " + buildStatus + " (check codebuild project cloudwatch log group for details)"
                      break
              return buildWaitStatus


          def get_build_status(buildId, client):
              build = client.batch_get_builds(ids=buildId)
              return build["builds"][0]["buildStatus"]


          def create_event(event, context):
              try:
                  data = {"data": start_build()}
                  if data["data"] == "SUCCESS":
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, data, "CustomResourcePhysicalID")
                  else:
                      reason = f"See the details in CloudWatch Log Stream: '{context.log_group_name} and CloudFormation Events'"
                      cfnresponse.send(event, context, cfnresponse.FAILED, data, "CustomResourcePhysicalID")
              except Exception:
                  LOGGER.exception("Unexpected!")
                  reason = f"See the details in CloudWatch Log Stream: '{context.log_group_name}'"
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, "CustomResourcePhysicalID", reason=reason)
              return "CustomResourcePhysicalID"

          def delete_event(event, context):
              cfn_client = boto3.client("cloudformation")
              s3_client = boto3.resource("s3")
              staging_bucket = s3_client.Bucket(STAGING_S3_BUCKET_NAME)
              try:
                  bucket_versioning = staging_bucket.Versioning()
                  if bucket_versioning.status == "Enabled":
                      LOGGER.info("versioning enabled; deleting object versions")
                      delete_version_response = staging_bucket.object_versions.delete()
                      LOGGER.info("see next message for delete response")
                      LOGGER.info(delete_version_response)
                      LOGGER.info("suspending versioning...")
                      bucket_versioning.suspend()
                  LOGGER.info("deleting objects")
                  delete_object_response = staging_bucket.objects.all().delete()
                  LOGGER.info("see next message for delete object response")
                  LOGGER.info(delete_object_response)
              except ClientError as e:
                  LOGGER.info(f"Delete objects error: {e}")
                  reason = f"See the details in CloudWatch Log Stream: '{context.log_group_name}'"
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, "CustomResourcePhysicalID", reason=reason)
              cfn_response = cfn_client.delete_stack(StackName=STAGING_S3_BUCKET_STACK_NAME)
              LOGGER.info(cfn_response)
              waiter = cfn_client.get_waiter("stack_delete_complete")
              waiter.wait(StackName=STAGING_S3_BUCKET_STACK_NAME, WaiterConfig={"Delay": 15, "MaxAttempts": 120})
              LOGGER.info(STAGING_S3_BUCKET_STACK_NAME + " stack deleted")
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"delete_operation": f"succeeded deleting {STAGING_S3_BUCKET_STACK_NAME}"}, "CustomResourcePhysicalID")

          def lambda_handler(event, context):
              LOGGER.info(event)
              if event["RequestType"] == "Create":
                  LOGGER.info("CREATE EVENT!!")
                  create_event(event, context)
              if event["RequestType"] == "Update":
                  LOGGER.info("UPDATE EVENT!!")

              if event["RequestType"] == "Delete":
                  LOGGER.info("DELETE EVENT!!")
                  delete_event(event, context)
  StartCodeBuildProjectLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref CodeBuildProjectLambdaRoleName
      Description: !Sub Role for '${CodeBuildProjectLambdaRoleName}' Lambda function
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::${AWS::Partition}:policy/AWSCodeBuildAdminAccess"
      Policies:
        - PolicyName: codebuild-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: codebuildStartBuild
                Effect: Allow
                Action: 
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt CodeBuildProject.Arn
        - PolicyName: CloudWatchLogGroup-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CodeBuildProjectLambdaFunctionName}:log-stream:*
        - PolicyName: "s3-staging-bucket-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicy
                  - s3:GetObjectAcl
                  - s3:PutObjectAcl
                  - s3:DeleteBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:GetBucketVersioning
                  - s3:DeleteBucketPolicy
                  - s3:ListBucketVersions
                  - s3:PutBucketVersioning
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${SRAAMIBakeryBucket}-${AWS::AccountId}-${AWS::Region}"
                  - !Sub "arn:${AWS::Partition}:s3:::${SRAAMIBakeryBucket}-${AWS::AccountId}-${AWS::Region}/*"
        - PolicyName: "lambda-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:DeleteFunction
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:sra*"
        - PolicyName: "cloudformation-stack-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                Resource:
                  - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*"
        - PolicyName: "IAM-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                Resource:
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"

